<!-- Licensed under a BSD license. See license.html for license -->
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>TTTTTTTest</title>
  <link type="text/css" href="index.css" rel="stylesheet" />
</head>

<body>
  <canvas id="canvas"></canvas>
  <div id="uiContainer">
    <div id="ui">
      <div id="cameraAngle"></div>
    </div>
  </div>
</body>
<!--
for most samples webgl-utils only provides shader compiling/linking and
canvas resizing because why clutter the examples with code that's the same in every sample.
See https://webgl2fundamentals.org/webgl/lessons/webgl-boilerplate.html
and https://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
for webgl-utils, m3, m4, and webgl-lessons-ui.
-->
<script src="twgl-full.min.js"></script>
<script src="m4.js"></script>
<script src="flattened-primitives.js"></script>
<script>

  "use strict";

  var vs = `#version 300 es
  in vec4 a_position;
  in vec4 a_color;

  uniform mat4 u_matrix;

  out vec4 v_color;

  void main() {

    gl_Position = u_matrix * a_position;

    v_color = a_color;
  }
`;

  var fs = `#version 300 es
  precision highp float;

  in vec4 v_color;

  uniform vec4 u_colorMult;

  out vec4 outColor;

  void main() 
  {
      outColor = v_color * u_colorMult;
  }
`;
  var Node = function() {
    this.children = [];
    this.localMatrix = m4.identity();
    this.worldMatrix = m4.identity();
  };

  Node.prototype.setParent = function(parent) {
    //remove us from our parent
    if(this.parent) {
      var ndx = this.parent.children.indexOf(this);
      if(ndx >= 0) {
        this.parent.children.splice(ndx, 1);
      }
    }
    // Add us to our new Parent
    if(parent){
      parent.children.push(this);
    }
    this.parent = parent;
  };

  Node.prototype.updateWorldMatrix = function(matrix){
    if(matrix){
      m4.multiply(matrix,this.localMatrix, this.worldMatrix);
    }else{
      m4.copy(this.localMatrix, this.worldMatrix);
    }

    // now precess all the childrend
    var worldMatrix = this.worldMatrix;
    this.children.forEach(function(child) {
      child.updateWorldMatrix(worldMatrix);
    });
  };

  function main() {
    // Get A WebGL context
    /** @type {HTMLCanvasElement} */
    var canvas = document.querySelector("#canvas");
    var gl = canvas.getContext("webgl2");
    if (!gl) {
      return;
    }
    // tell the twgl to match position with a_position, n
    // normal with a_normal etc..
    twgl.setAttributePrefix("a_");
    
    var sphereBufferInfo = flattenedPrimitives.createSphereBufferInfo(gl, 10, 12, 6);

    //setup GLSL program
    var programInfo = twgl.createProgramInfo(gl, [vs, fs]);
    var sphereVAO = twgl.createVAOFromBufferInfo(gl, programInfo, sphereBufferInfo);

    function degToRad(d) {
      return d * Math.PI / 180;
    }
  }
    
  main();
</script>
</html>